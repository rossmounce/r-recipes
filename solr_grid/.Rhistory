coord_cartesian(ylim =c(-45, 70), xlim=c(-165, 165)) +
theme_map() +
geom_point(aes(lon, lat),data=trips$geocode_origin, alpha = 0.8, size = 1, colour = "white") +
geom_point(aes(lon, lat),data=trips$geocode_destination, alpha = 0.8, size = 1, colour = "white")
library(ggplot2)
library(ggmap)
library(sp)
library(grid)
library(geosphere)
library(plyr)
# source the theme_map for ggplot2
source("https://dl.dropboxusercontent.com/u/2364714/theme_map.R")
# in the original post I had a data.frame with 500k rows of top origin destination pairs
trips <- data.frame(origin = c("San Francisco", "Sydney"),
destination = c("Paris", "Tokyo"),
stringsAsFactors = FALSE)
# get lat and lon of cities
trips$geocode_origin <- suppressMessages(geocode(trips$origin))
trips$geocode_destination <- suppressMessages(geocode(trips$destination))
# get intermediate points between the two locations
arch <- gcIntermediate(trips$geocode_origin,
trips$geocode_destination,
n=100,
breakAtDateLine=FALSE,
addStartEnd=TRUE, sp=TRUE)
# http://docs.ggplot2.org/0.9.3.1/fortify.map.html
arch_fortified <- plyr::ldply(arch@lines, fortify)
# a few lines of ggplot2 code
ggplot() +
geom_line(aes(long,lat,group=group), data=arch_fortified, alpha=0.1,size=1, colour="skyblue1") +
coord_cartesian(ylim =c(-45, 70), xlim=c(-165, 165)) +
theme_map() +
geom_point(aes(lon, lat),data=trips$geocode_origin, alpha = 0.8, size = 1, colour = "white") +
geom_point(aes(lon, lat),data=trips$geocode_destination, alpha = 0.8, size = 1, colour = "white")
ggplot() +
geom_line(aes(long,lat,group=group), data=arch_fortified, alpha=0.1,size=1, colour="skyblue1") +
coord_cartesian(ylim =c(-45, 70), xlim=c(-165, 165)) +
geom_point(aes(lon, lat),data=trips$geocode_origin, alpha = 0.8, size = 1, colour = "white") +
geom_point(aes(lon, lat),data=trips$geocode_destination, alpha = 0.8, size = 1, colour = "white")
library(ggplot2)
library(ggmap)
library(sp)
library(grid)
library(geosphere)
library(plyr)
# source the theme_map for ggplot2
source("https://dl.dropboxusercontent.com/u/2364714/theme_map.R")
# in the original post I had a data.frame with 500k rows of top origin destination pairs
trips <- data.frame(origin = c("San Francisco", "Sydney"),
destination = c("Paris", "Tokyo"),
stringsAsFactors = FALSE)
# get lat and lon of cities
trips$geocode_origin <- suppressMessages(geocode(trips$origin))
trips$geocode_destination <- suppressMessages(geocode(trips$destination))
# get intermediate points between the two locations
arch <- gcIntermediate(trips$geocode_origin,
trips$geocode_destination,
n=100,
breakAtDateLine=FALSE,
addStartEnd=TRUE, sp=TRUE)
# http://docs.ggplot2.org/0.9.3.1/fortify.map.html
arch_fortified <- plyr::ldply(arch@lines, fortify)
# a few lines of ggplot2 code
ggplot() +
geom_line(aes(long,lat,group=group), data=arch_fortified, alpha=0.1,size=1, colour="skyblue1") +
coord_cartesian(ylim =c(-45, 70), xlim=c(-165, 165)) +
geom_point(aes(lon, lat),data=trips$geocode_origin, alpha = 0.8, size = 1, colour = "white") +
geom_point(aes(lon, lat),data=trips$geocode_destination, alpha = 0.8, size = 1, colour = "white")
# a few lines of ggplot2 code
ggplot() +
geom_line(aes(long,lat,group=group), data=arch_fortified, alpha=0.1,size=1, colour="skyblue1") +
coord_cartesian(ylim =c(-45, 70), xlim=c(-165, 165)) +
geom_point(aes(lon, lat),data=trips$geocode_origin, alpha = 0.8, size = 1, colour = "white") +
geom_point(aes(lon, lat),data=trips$geocode_destination, alpha = 0.8, size = 1, colour = "white") + geom_map()
world <- map_data("world")
world <- world[world$region != "Antarctica",]
ggplot() +
geom_map(data=world, map=world,
aes(x=long, y=lat, map_id=region),
color="white", fill="#7f7f7f", size=0.05, alpha=1/4) +
geom_line(aes(long,lat,group=group), data=arch_fortified, alpha=0.1,size=1, colour="skyblue1") +
coord_cartesian(ylim =c(-45, 70), xlim=c(-165, 165)) +
geom_point(aes(lon, lat),data=trips$geocode_origin, alpha = 0.8, size = 1, colour = "black") +
geom_point(aes(lon, lat),data=trips$geocode_destination, alpha = 0.8, size = 1, colour = "black")
trips$geocode_origin
trips$geocode_detination
trips$geocode_dedtination
trips$geocode_destination
arch
arch_fortified
my_gc
#'
#' ### Call Solr API within R
library(solrium)
#' #### Connect
solrium::solr_connect("localhost:8983/solr/grid/select",
errors = "complete",
verbose = FALSE)
#' #### Search
solrium::solr_search(q = '"University of Exeter"')
#' All orgs from Göttingen
solrium::solr_search(q = "city:Göttingen", rows = 100)
#' ### Retrieve geo-coordinates by GRID ID.
#' For this task, we will use a set of GRID IDs representing author affiliations. Affiliations were obtained
#' from the Web of Science and semi-automatically matched with GRID IDs. Because of the Web of Science database
#' licence, the Web of Science database identifier was anomized for this recipe.
#'
#' #### Load dataset with GRID IDs
#'
#' The dataset consist of two columns where `pub_id` represents publications and `grid_id_consolidated` affiliations (GRID ID)
grids <- readr::read_csv("grids.csv")
grids
#' Remove NA and `not_in_grid`
grids <-
filter(grids,
!is.na(grid_id_consolidated) &
!grid_id_consolidated == "not_in_grid")
#' #### Call local Solr API
solrium::solr_search(q = 'id:grid.1006.7')
#' Apply over all rows and add pub_id
library(dplyr)
my_gc <-
plyr::ldply(grids$grid_id_consolidated, function(x)
solrium::solr_search(q = paste0("id:", x))) %>%
as_data_frame() %>%
mutate(pub_id = grids$pub_id)
my_gc
#' ## Cleaning affiliations with GRID and Solr
#'
#' It is a common strategy to use research affiliations in scholarly articles to
#' analyse research collaborations. Unfortunately, author addresses are often ambigue
#' and require a lot of cleaning. To spend less time for data-curation, we use the
#' [Global Research Identifier Database (GRID)](https://www.digital-science.com/products/grid/)
#'  to identify institutions, and to gather cross-references as well as geo coordinates.
#'
#' In the following, it is described how you can use the most recent GRID data dump within R.
#'
#' ### Prerequisite: Run docker image
#'
#' GRID has no web API to access its data, but publishes open data dumps on a regular basis.
#' SUB has created an Docker container that builds a local Solr index with the most recent data dump
#' from the Global Research Identifier Database (GRID). So we can use Solr as a super fast local
#' store for GRID.
#'
#' Clone
#' - <https://github.com/subugoe/gro-solr_docker>
#'
#' and follow the instructions.
#'
#' ### Call Solr API within R
library(solrium)
#' #### Connect
solrium::solr_connect("localhost:8983/solr/grid/select",
errors = "complete",
verbose = FALSE)
#' #### Search
solrium::solr_search(q = '"University of Exeter"')
#' All orgs from Göttingen
solrium::solr_search(q = "city:Göttingen", rows = 100)
#' ### Retrieve geo-coordinates by GRID ID.
#' For this task, we will use a set of GRID IDs representing author affiliations. Affiliations were obtained
#' from the Web of Science and semi-automatically matched with GRID IDs. Because of the Web of Science database
#' licence, the Web of Science database identifier was anomized for this recipe.
#'
#' #### Load dataset with GRID IDs
#'
#' The dataset consist of two columns where `pub_id` represents publications and `grid_id_consolidated` affiliations (GRID ID)
grids <- readr::read_csv("grids.csv")
grids
#' Remove NA and `not_in_grid`
grids <-
filter(grids,
!is.na(grid_id_consolidated) &
!grid_id_consolidated == "not_in_grid")
#' #### Call local Solr API
solrium::solr_search(q = 'id:grid.1006.7')
#' Apply over all rows and add pub_id
library(dplyr)
my_gc <-
plyr::ldply(grids$grid_id_consolidated, function(x)
solrium::solr_search(q = paste0("id:", x))) %>%
as_data_frame() %>%
mutate(pub_id = grids$pub_id)
my_gc
grids_mat <- table(grids$grid_id_consolidated, grids$)
grids_mat <- table(grids$grid_id_consolidated, grids$pub_id)
mat_t <- grids_mat %*% t(grid_mat)
mat_t <- grids_mat %*% t(grids_mat)
library(sna)
gplot(mat_t)
igraph::get.edgelist(mat_t, type = "upper")
igraph::get.edgelist(mat_t, type = c("upper"))
igraph::get.edgelist(graph= mat_t, type = c("upper"))
igraph::get.edgelist(graph= mat_t, type = "upper")
igraph::get.edgelist(graph= mat_t)
igraph::from_adjacency(mat_t, mode = c("undirected", "upper"))
my_net <- igraph::from_adjacency(mat_t, mode = c("undirected", "upper"))
igraph::get.edgelist(my_net)
my_net <- igraph::from_adjacency(mat_t, mode = c("undirected", "upper"))
igraph::get.edgelist(my_net)
my_net <- igraph::from_adjacency(mat_t, mode = c("undirected", "upper"))
my_net
my_net <- igraph::graph_from_adjacency_matrix(mat_t, mode = c("undirected", "upper"))
my_net <- igraph::graph_from_adjacency_matrix(mat_t, mode = c("undirected"))
igraph::get.edgelist(my_net)
my_graph <- igraph::get.edgelist(my_net)
head(my_graph)
my_graph <- igraph::get.edgelist(my_net) %>%
unique()
head(my_graph)
my_graph <- igraph::get.edgelist(my_net)
head(my_graph)
apply(duplicated,1, my_graph)
apply(my_graph, 1, duplicated)
apply(my_graph, 1, duplicated, value = TRUE)
apply(my_graph, 1, unique)
tt <- apply(my_graph, 1, unique)
tt <- apply(my_graph, 1, !duplicated)
tt <- apply(my_graph, 1, duplicated)
rr
tt
my_df[with(my_df, my_df[,1] != my_df[,2]),]
my_graph[with(my_graph, my_graph[,1] != my_graph[,2]),]
tt=which(duplicated(my_df) | duplicated(my_df,fromLast = T))
my_graph[tt,]
my_graph$tt <- tt
head(my_graph)
my_graph <- igraph::get.edgelist(my_net)
test <- cbind(tt, my_graph)
head(tt)
test <- cbind(my_graph)
tt
table(tt)
unlist(tt)
my_graph$tt <- tt
my_graph <- igraph::get.edgelist(my_net)
data_frame(my_graph)
head(my_graph)
my_graph[with(my_graph, my_graph[,1] != my_graph[,2]),]
my_graph[with(my_graph, my_graph[,1] %in% my_graph[,2]),]
my_graph %>% as_data_frame()
my_graph <- my_graph %>% as_data_frame()
my_graph[with(my_graph, my_graph[,1] %in% my_graph[,2]),]
tt=which(duplicated(my_graph) | duplicated(my_graph,fromLast = T))
tt
my_graph[tt,]
tt <- apply(my_graph, 1, unique)
tt
distinct(my_graph, V1, V2)
tt
my_graph
in
igraph::get.edgelist
?igraph::get.edgelist
?igraph::graph_from_adjacency_matrix
my_net <- igraph::graph_from_adjacency_matrix(mat_t, mode = c("undirected"), diag = FALSE)
my_graph <- igraph::get.edgelist(my_net)
head(my_graph)
my_graph_in <- ldply(my_graph[,1], function(x) solrium::solr_search(q = paste0("id:", x))))
my_graph_in <- ldply(my_graph[,1], function(x) solrium::solr_search(q = paste0("id:", x)))
my_graph_out <- ldply(my_graph[,2], function(x) solrium::solr_search(q = paste0("id:", x)))
trips$geocode_origin <- suppressMessages(geocode(trips$origin))
trips$geocode_origin
select(my_graph_in, lng, lat)
arch <- gcIntermediate(select(my_graph_in, lng, lat),
select(my_graph_out, lng, lat),
n=100,
breakAtDateLine=FALSE,
addStartEnd=TRUE, sp=TRUE)
arch <- gcIntermediate(select(my_graph_in, as.numeric(lng),  as.numeric(lat)),
select(my_graph_out,as.numeric(lng),  as.numeric(lat)),
n=100,
breakAtDateLine=FALSE,
addStartEnd=TRUE, sp=TRUE)
?gcIntermediate
gcIntermediate(select(my_graph_in, as.numeric(lng), as.numeric(lat)),
select(my_graph_out,as.numeric(lng),  as.numeric(lat)),
n=100,
breakAtDateLine=FALSE,
addStartEnd=TRUE, sp=TRUE)
gcIntermediate(select(my_graph_in[1], as.numeric(lng), as.numeric(lat)),
select(my_graph_out[1],as.numeric(lng),  as.numeric(lat)),
n=100,
breakAtDateLine=FALSE,
addStartEnd=TRUE, sp=TRUE)
arch <- gcIntermediate(select(my_graph_in[1,], as.numeric(lng), as.numeric(lat)),
select(my_graph_out[1,],as.numeric(lng),  as.numeric(lat)),
n=100,
breakAtDateLine=FALSE,
addStartEnd=TRUE, sp=TRUE)
my_graph_in[1,]
my_graph_out[1,]
gcIntermediate(select(my_graph_in[1,], as.numeric(lng), as.numeric(lat)),
select(my_graph_out[1,],as.numeric(lng),  as.numeric(lat)),
n=50,
breakAtDateLine=FALSE,
addStartEnd=TRUE, sp=TRUE)
gcIntermediate(select(my_graph_in[1,], as.numeric(lng), as.numeric(lat)),
select(my_graph_out[1,],as.numeric(lng),  as.numeric(lat)),
n=50,
breakAtDateLine=FALSE,
addStartEnd=TRUE
)
select(my_graph_in[1,], p1 = as.numeric(lng), as.numeric(lat))
select(my_graph_in[1,], long = as.numeric(lng), lat = as.numeric(lat))
cIntermediate(select(my_graph_in[1,], long = as.numeric(lng), lat = as.numeric(lat)),
select(my_graph_out[1,],long = as.numeric(lng),  lat = as.numeric(lat)),
n=50,
breakAtDateLine=FALSE,
addStartEnd=TRUE, sp=TRUE)
gcIntermediate(select(my_graph_in[1,], long = as.numeric(lng), lat = as.numeric(lat)),
select(my_graph_out[1,],long = as.numeric(lng),  lat = as.numeric(lat)),
n=50,
breakAtDateLine=FALSE,
addStartEnd=TRUE, sp=TRUE)
gcIntermediate(select(my_graph_in[1,], long = as.numeric(lng), lat = as.numeric(lat)),
select(my_graph_out[1,],long = as.numeric(lng),  lat = as.numeric(lat)),
n=50,
breakAtDateLine=TRUE,
addStartEnd=TRUE, sp=TRUE)
arch <- gcIntermediate(p1 = select(my_graph_in[1,], long = as.numeric(lng), lat = as.numeric(lat)),
p2 = select(my_graph_out[1,],long = as.numeric(lng),  lat = as.numeric(lat)),
n=50,
breakAtDateLine=FALSE,
addStartEnd=TRUE, sp=TRUE)
select(my_graph_in[1,], long = as.numeric(lng), lat = as.numeric(lat))
select(my_graph_in[1:10,], long = as.numeric(lng), lat = as.numeric(lat))
select(my_graph_in[1:100,], long = as.numeric(lng), lat = as.numeric(lat))
select(my_graph_in[1:10000,], long = as.numeric(lng), lat = as.numeric(lat))
my_graph_in[is.na(lng)]
my_graph_in[is.na(my_graph_in$lng)]
my_graph_in[is.na(my_graph_in$lng),]
my_graph_in %>% select(lng, lat)
p1 <- my_graph_in %>% select(lng, lat)
p3 <- my_graph_out %>% select(lng, lat)
p2 <- my_graph_out %>% select(lng, lat)
gcIntermediate(p1[1,], p2[1,])
pi1[1,]
p1[1,]
str(p1)
as.numeric(p1[1,])
as.numeric(p1[1,])
gcIntermediate(as.numeric(p1[1,]), as.numeric(p2[1,])
)
ldply(p1, as.numeric)
sapply(p1, as.numeric)
p1 <- my_graph_in %>% select(lng, lat)
p2 <- my_graph_out %>% select(lng, lat)
arch <- gcIntermediate(sapply(p1, as.numeric),
sapply(p2, as.numeric),
n=50,
breakAtDateLine=FALSE,
addStartEnd=TRUE, sp=TRUE)
sapply(p2, as.numeric)
p1 <- my_graph_in %>% select(lng, lat) %>% filter(is.na(lng))
p2 <- my_graph_out %>% select(lng, lat) %>% filter(is.na(lng)
arch <- gcIntermediate(sapply(p1, as.numeric),
sapply(p2, as.numeric),
n=50,
breakAtDateLine=FALSE,
addStartEnd=TRUE, sp=TRUE)
# http://docs.ggplot2.org/0.9.3.1/fortify.map.html
arch_fortified <- plyr::ldply(arch@lines, fortify)
world <- map_data("world")
world <- world[world$region != "Antarctica",]
# a few lines of ggplot2 code
ggplot() +
geom_map(data=world, map=world,
aes(x=long, y=lat, map_id=region),
color="white", fill="#7f7f7f", size=0.05, alpha=1/4) +
geom_line(aes(long,lat,group=group), data=arch_fortified, alpha=0.1,size=1, colour="skyblue1") +
coord_cartesian(ylim =c(-45, 70), xlim=c(-165, 165)) +
geom_point(aes(lon, lat),data=trips$geocode_origin, alpha = 0.8, size = 1, colour = "black") +
geom_point(aes(lon, lat),data=trips$geocode_destination, alpha = 0.8, size = 1, colour = "black")
p2 <- my_graph_out %>% select(lng, lat) %>% filter(is.na(lng))
arch <- gcIntermediate(sapply(p1, as.numeric),
sapply(p2, as.numeric),
n=50,
breakAtDateLine=FALSE,
addStartEnd=TRUE, sp=TRUE)
p1 <- my_graph_in %>% select(lng, lat) %>% filter(is.na(lng))
p2 <- my_graph_out %>% select(lng, lat) %>% filter(is.na(lng))
arch <- gcIntermediate(sapply(p1, as.numeric),
sapply(p2, as.numeric),
n=50,
breakAtDateLine=FALSE,
addStartEnd=TRUE, sp=TRUE)
View(p1)
p1 <- my_graph_in %>% select(lng, lat) %>% filter(!is.na(lng))
p2 <- my_graph_out %>% select(lng, lat) %>% filter(!is.na(lng))
arch <- gcIntermediate(sapply(p1, as.numeric),
sapply(p2, as.numeric),
n=50,
breakAtDateLine=FALSE,
addStartEnd=TRUE, sp=TRUE)
arch_fortified <- plyr::ldply(arch@lines, fortify)
ggplot() +
geom_map(data=world, map=world,
aes(x=long, y=lat, map_id=region),
color="white", fill="#7f7f7f", size=0.05, alpha=1/4) +
geom_line(aes(long,lat,group=group), data=arch_fortified, alpha=0.1,size=1, colour="skyblue1") +
coord_cartesian(ylim =c(-45, 70), xlim=c(-165, 165)) +
geom_point(aes(lon, lat),data=trips$geocode_origin, alpha = 0.8, size = 1, colour = "black") +
geom_point(aes(lon, lat),data=trips$geocode_destination, alpha = 0.8, size = 1, colour = "black")
ggplot() +
geom_map(data=world, map=world,
aes(x=long, y=lat, map_id=region),
color="#191919", fill="#7f7f7f", size=0.05, alpha=1/4) +
geom_line(aes(long,lat,group=group), data=arch_fortified, alpha=0.1,size=1, colour="skyblue1") +
coord_cartesian(ylim =c(-45, 70), xlim=c(-165, 165))
# a few lines of ggplot2 code
ggplot() +
geom_map(data=world, map=world,
aes(x=long, y=lat, map_id=region),
color="#191919", fill="#7f7f7f", size=0.05, alpha=1/4) +
geom_line(aes(long,lat,group=group), data=arch_fortified, alpha=0.1,size=1, colour="skyblue1") +
coord_cartesian(ylim =c(-45, 70), xlim=c(-165, 165)) +
theme_map() +
theme(strip.background = element_blank()) +
theme(legend.position = "none")
ggplot() +
geom_map(data=world, map=world,
aes(x=long, y=lat, map_id=region),
color="#191919", fill="#7f7f7f", size=0.05, alpha=1/4) +
geom_line(aes(long,lat,group=group), data=arch_fortified, alpha=0.1,size=1, colour="skyblue1") +
coord_cartesian(ylim =c(-45, 70), xlim=c(-165, 165)) +
theme_map()
ggplot() +
geom_map(data=world, map=world,
aes(x=long, y=lat, map_id=region),
color="#191919", fill="#7f7f7f", size=0.05, alpha=1/4) +
geom_line(aes(long,lat,group=group), data=arch_fortified, alpha=0.1,size=1, colour="skyblue1") +
coord_cartesian(ylim =c(-45, 70), xlim=c(-165, 165))
View(theme_map)
remove(theme_map())
remove(theme_map
)
ggplot() +
geom_map(data=world, map=world,
aes(x=long, y=lat, map_id=region),
color="#191919", fill="#7f7f7f", size=0.05, alpha=1/4) +
geom_line(aes(long,lat,group=group), data=arch_fortified, alpha=0.1,size=1, colour="skyblue1") +
coord_cartesian(ylim =c(-45, 70), xlim=c(-165, 165)) +
theme_map() +
theme(strip.background = element_blank()) +
theme(legend.position = "none")
library(ggalt)
ggplot() +
geom_map(data=world, map=world,
aes(x=long, y=lat, map_id=region),
color="#191919", fill="#7f7f7f", size=0.05, alpha=1/4) +
geom_line(aes(long,lat,group=group), data=arch_fortified, alpha=0.1,size=1, colour="skyblue1") +
coord_cartesian(ylim =c(-45, 70), xlim=c(-165, 165)) +
theme_map() +
theme(strip.background = element_blank()) +
theme(legend.position = "none")
library(ggplot2)
library(ggalt)
ggplot() +
geom_map(data=world, map=world,
aes(x=long, y=lat, map_id=region),
color="#191919", fill="#7f7f7f", size=0.05, alpha=1/4) +
geom_line(aes(long,lat,group=group), data=arch_fortified, alpha=0.1,size=1, colour="skyblue1") +
coord_cartesian(ylim =c(-45, 70), xlim=c(-165, 165)) +
theme_map() +
theme(strip.background = element_blank()) +
theme(legend.position = "none")
library(ggplot2)
library(ggalt)
library(ggthemes)
ggplot() +
geom_map(data=world, map=world,
aes(x=long, y=lat, map_id=region),
color="#191919", fill="#7f7f7f", size=0.05, alpha=1/4) +
geom_line(aes(long,lat,group=group), data=arch_fortified, alpha=0.1,size=1, colour="skyblue1") +
coord_cartesian(ylim =c(-45, 70), xlim=c(-165, 165)) +
theme_map() +
theme(strip.background = element_blank()) +
theme(legend.position = "none")
ggplot() +
geom_map(data=world, map=world,
aes(x=long, y=lat, map_id=region),
color="#191919", fill="#7f7f7f", size=0.05, alpha=1/4) +
geom_line(aes(long,lat,group=group), data=arch_fortified, alpha= 1/100 ,size=1, colour="skyblue1") +
coord_cartesian(ylim =c(-45, 70), xlim=c(-165, 165)) +
theme_map() +
theme(strip.background = element_blank()) +
theme(panel.background = element_rect(fill = "black")) +
theme(legend.position = "none")
# a few lines of ggplot2 code
ggplot() +
geom_map(data=world, map=world,
aes(x=long, y=lat, map_id=region),
color="#191919", fill="#7f7f7f", size=0.05, alpha=1/4) +
geom_line(aes(long,lat,group=group), data=arch_fortified, alpha= 5/100 ,size=1, colour="skyblue1") +
coord_cartesian(ylim =c(-45, 70), xlim=c(-165, 165)) +
theme_map() +
theme(strip.background = element_blank()) +
theme(panel.background = element_rect(fill = "black")) +
theme(legend.position = "none")
ggplot() +
geom_map(data=world, map=world,
aes(x=long, y=lat, map_id=region),
color="#191919", fill="#7f7f7f", size=0.05, alpha=1/4) +
geom_line(aes(long,lat,group=group), data=arch_fortified, alpha= 1/100 ,size=1, colour="skyblue1") +
coord_cartesian(ylim =c(-45, 70), xlim=c(-165, 165)) +
theme_map() +
theme(strip.background = element_blank()) +
theme(panel.background = element_rect(fill = "black")) +
theme(legend.position = "none")
ggsave("~/Downloads/test_map.pdf", dpi = 700)
ggsave("~/Downloads/test_map.pdf", dpi = 800)
